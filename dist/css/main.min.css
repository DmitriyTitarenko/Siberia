/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section{display:block}h1{font-size:2em;margin:.67em 0}figure{margin:1em 40px}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}a{background-color:transparent;-webkit-text-decoration-skip:objects}abbr[title]{border-bottom:none;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}dfn{font-style:italic}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}audio,canvas,video{display:inline-block}audio:not([controls]){display:none;height:0}img{border-style:none}svg:not(:root){overflow:hidden}button,input,optgroup,select,textarea{font-family:sans-serif;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}[type=checkbox],[type=radio]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}fieldset{padding:.35em .75em .625em}legend{display:table;max-width:100%;padding:0;color:inherit;white-space:normal}progress{display:inline-block;vertical-align:baseline}textarea{overflow:auto}summary{display:list-item}[hidden],template{display:none}*,legend{-webkit-box-sizing:border-box;box-sizing:border-box}body,html{width:100%;min-height:100vh}.container{width:100%;padding:100px 0}.p{margin:0;padding:0}.section-title{font-family:'Exo 2',sans-serif;font-weight:700;font-size:48px;text-transform:uppercase}.section-subtitle{font-size:18px;font-weight:400;font-family:'Exo 2',sans-serif}input[type=number]{-moz-appearance:textfield}input::-webkit-inner-spin-button,input::-webkit-outer-spin-button{-webkit-appearance:none}
/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section{display:block}h1{font-size:2em;margin:.67em 0}figure{margin:1em 40px}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}a{background-color:transparent;-webkit-text-decoration-skip:objects}abbr[title]{border-bottom:none;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}dfn{font-style:italic}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}audio,canvas,video{display:inline-block}audio:not([controls]){display:none;height:0}img{border-style:none}svg:not(:root){overflow:hidden}button,input,optgroup,select,textarea{font-family:sans-serif;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}[type=checkbox],[type=radio]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}fieldset{padding:.35em .75em .625em}legend{display:table;max-width:100%;padding:0;color:inherit;white-space:normal}progress{display:inline-block;vertical-align:baseline}textarea{overflow:auto}summary{display:list-item}[hidden],template{display:none}*,legend{-webkit-box-sizing:border-box;box-sizing:border-box}body,html{width:100%;min-height:100vh}.container{width:100%;padding:100px 0}.p{margin:0;padding:0}.section-title{font-family:'Exo 2',sans-serif;font-weight:700;font-size:48px;text-transform:uppercase}.section-subtitle{font-size:18px;font-weight:400;font-family:'Exo 2',sans-serif}input[type=number]{-moz-appearance:textfield}input::-webkit-inner-spin-button,input::-webkit-outer-spin-button{-webkit-appearance:none}#map{width:100%;height:498px}.advantages__wrap{background:url(../img/scheme.png) center center no-repeat;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.advantages__subtitle,.advantages__title{font-size:18px;font-weight:300;color:#0f4583;text-transform:uppercase;font-family:'Exo 2',sans-serif;margin:0}.advantages__title{font-weight:700;font-size:48px;color:#0296ea;position:relative;margin:100px 0 25px}.advantages__title::before{content:'';border-right:2px solid #0296ea;position:absolute;height:20px;right:50%;top:-50%}.advantages__descr{width:950px;text-align:center;font-size:18px;font-family:'Exo 2',sans-serif;line-height:30px;font-weight:400;color:#707070;margin:0 0 80px}.advantages__list{list-style:none;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.advantages__list-item{width:400px}.advantages__list-item:nth-child(odd){margin-right:116px}.manufacture__wrap{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background:url(../img/100per.jpg) center center no-repeat;padding:60px 0;width:100%}.manufacture__title{font-size:72px;font-weight:800;color:#fff;margin:0 0 36px;position:relative}.manufacture__title::after,.manufacture__title::before{content:'';border-bottom:2px solid #0296ea;display:inline-block;position:absolute;width:22px;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%)}.manufacture__title::after{right:-20%}.manufacture__title::before{left:-20%}.manufacture__subtitle,.ui-btn{color:#fff;font-weight:400;text-transform:uppercase}.manufacture__subtitle{line-height:50px;margin:0 0 57px;font-size:36px}.ui-btn{font-family:'Exo 2',sans-serif;background:0 0;border:3px solid #fff;border-left:none;border-right:none;padding:25px 45px;outline:0;font-size:18px}.intro__slider{position:relative;text-align:center;padding:0;margin:0}@media screen and (max-width:1024px){.slick-dotted.slick-slider{margin-bottom:0}}.intro__slide{position:relative;z-index:1;border-radius:6px}.intro__img{display:block;width:100%;height:auto;border-radius:20px;-webkit-filter:blur(4px) opacity(50%);filter:blur(4px) opacity(50%)}.next,.prev{z-index:3;position:absolute;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:42px;height:42px;margin:0;cursor:pointer;color:#fff;border:1px solid rgba(255,255,255,.35);border-radius:50%}.slick-disabled{color:rgba(255,255,255,.35)}.prev{left:70px}@media screen and (max-width:768px){.prev{display:none;visibility:hidden}}.next{right:70px}@media screen and (max-width:768px){.next{display:none;visibility:hidden}}.slick-dots{bottom:30px}@media screen and (max-width:768px){.slick-dots{bottom:20px}}@media screen and (max-width:612px){.slick-dots{bottom:10px}}.slick-dots li{width:9px;height:9px;border-radius:50%;border:2px solid transparent;background-color:rgba(255,255,255,.35)}.slick-dots .slick-active{width:9px;height:9px;border-radius:50%;border:2px solid #fff}.feedback__wrap{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:#fff;background:url(../img/feedback.jpg)}.feedback__title{color:#fff;margin:0 0 30px}.feedback-subtitle{margin:0 0 37px}.feedback__form{display:-webkit-box;display:-ms-flexbox;display:flex}.feedback__form-input{padding:24px 80px 25px 30px;margin-right:20px;border:2px solid #0296ea;border-radius:30px;outline:0;width:302px;height:62px;background:0 0;font-family:'Lato',sans-serif;font-size:18px;font-weight:300;line-height:36px;color:#c9c9c9}.feedback__form-input::-webkit-input-placeholder{color:#c9c9c9;font-family:'Lato',sans-serif;font-size:18px;font-weight:300;line-height:36px}.feedback__form-input:-moz-placeholder,.feedback__form-input::-moz-placeholder{color:#c9c9c9;font-family:'Lato',sans-serif;font-size:18px;font-weight:300;line-height:36px}.feedback__form-input:-ms-input-placeholder{color:#c9c9c9;font-family:'Lato',sans-serif;font-size:18px;font-weight:300;line-height:36px}.contacts__wrap,.feedback__form-btn{background-color:#0296ea;font-family:'Exo 2',sans-serif;color:#fff}.feedback__form-btn{text-transform:uppercase;border:0;padding:25px 75px;border-radius:30px;font-size:18px;font-weight:400}.contacts__wrap{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.contacts__title{font-size:48px;font-weight:700;text-transform:uppercase;text-align:center}.contacts-subtitle{margin:0 0 66px}.adress__list{padding:0;list-style:none;display:-webkit-box;display:-ms-flexbox;display:flex}.adress__list-item{width:200px;position:relative}.adress__list-item:not(:last-child){margin-right:110px}.adress__list-item:nth-child(1)::before,.adress__list-item:nth-child(2)::before,.adress__list-item:nth-child(3)::before{content:'';position:absolute;background-size:cover;width:80px;height:80px;left:-50%;top:100%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%)}.adress__list-item:nth-child(1)::before{display:block;background-image:url(../img/location.png)}.adress__list-item:nth-child(2)::before,.adress__list-item:nth-child(3)::before{background-image:url(../img/tel.png)}.adress__list-item:nth-child(3)::before{background-image:url(../img/mail.png)}.adress__list-item--descr{position:absolute}.adress_list-item--link{text-decoration:none;color:#fff}.footer__develop,.footer__wrap{color:#fff;font-weight:400;display:-webkit-box;display:-ms-flexbox;display:flex}.footer__wrap{-ms-flex-pack:distribute;justify-content:space-around;background-color:#0f4583;letter-spacing:1.05px;padding:35px 0;font-family:"sans-serif";font-size:14px}.footer__develop{text-decoration:none;font-family:'Exo 2',sans-serif;font-size:18px;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.footer__developer-descr{padding:0;color:#fff;font-size:14px;margin:0 12px 0 0}.footer__developer-img{width:119px;height:40px}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
